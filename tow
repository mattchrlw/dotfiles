#!/usr/bin/env bash

##################################
#                                #
#  tow â€“ like GNU stow but less  #
#                                #
##################################

set -e

if [[ $# -lt 2 ]] || ([[ $1 != "link" ]] && [[ $1 != "unlink" ]]); then
  echo 'Usage: tow link|unlink path [path ...]'
  exit 0
fi

# link $1 and backup existing file if it does not point to $2
function tow_link() {
  if [ ! "$1" -ef "$2" ]; then # is dest not a symlink to f?
    if [ -e "$1" ]; then
      mv $1 "$1"_old # if dest exists, make backup
    fi
    ln -sf $2 $1 # link file
  fi
}

# unlink $1 if it points to $2
function tow_unlink() {
  echo unlink $1
  if [ "$1" -ef "$2" ]; then # is dest still a symlink to f?
    rm $1 # unlink f
  fi
}

for d in "${@:2}"; do
  if [[ -d $d ]]; then # if d is directory
    for f in ${d%/}/*; do
      if [[ $1 == "link" ]]; then # if unlink
        tow_link "$HOME/.$(basename $f)" "$PWD/$f"
      elif [[ $1 == "unlink" ]]; then
        tow_unlink "$HOME/.$(basename $f)" "$PWD/$f"
      fi
    done
  else # if d is a file
    if [[ $1 == "link" ]]; then # if unlink
      tow_link "$HOME/.$(basename $d)" "$PWD/$d"
    elif [[ $1 == "unlink" ]]; then
      tow_unlink "$HOME/.$(basename $d)" "$PWD/$d"
    fi
  fi
done

# TODO: cleanup all dead symlinks from home to $1
